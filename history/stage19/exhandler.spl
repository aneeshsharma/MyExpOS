[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP; 

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

backup;
multipush(EIP);

alias userSP R1;
alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 1];

userSP = [PROCESS_TABLE + currentPID * 16 + 13];

if ((EC != 0) || (userSP >= (PTLR * 512 - 1))) then
	print "Fatal Error";
	print currentPID;
	if (EC == 1) then
		print "Illegal Inst";
	endif;

	if (EC == 2) then
		print "Illegal Mem";
	endif;

	if (EC == 3) then
		print "Arithmetic";
	endif;

	if (userSP >= (PTLR * 512 - 1)) then
		print "Stack Overflow";
	endif;

	R1 = EXIT_PROCESS;
	// pid already in R2
	call PROCESS_MANAGER;

	call SCHEDULER;
endif;

// page fault
// code page
alias page_table R4;
page_table = PAGE_TABLE_BASE + currentPID * 20;

print "Page Fault";
if (EPN >= 4) then
	// get code page
	multipush(R1, R2, R4, EPN);
	R1 = GET_CODE_PAGE;
	// pid already in R2
	R3 = [DISK_MAP_TABLE + currentPID * 10 + EPN];
	call MEMORY_MANAGER;
	multipop(R1, R2, R4, EPN);

	[page_table + 2 * EPN] = R0;
	[page_table + 2 * EPN + 1] = "1100";
endif;

// heap page
if (EPN < 4) then
	multipush(R1, R2, R4);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R1, R2, R4);
	
	[page_table + 4] = R0;
	[page_table + 5] = "1110";
	
	multipush(R1, R2, R4);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R1, R2, R4);
	
	[page_table + 6] = R0;
	[page_table + 7] = "1110";
	print "Heap";
	print R0;
endif;

[PROCESS_TABLE + currentPID * 16 + 9] = 0;

multipop(EIP);

alias physical_address R5;

// set return point
physical_address = [page_table + 2 * ((userSP + 1) / 512)] * 512 + ((userSP + 1) % 512);
[physical_address] = EIP;

restore;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
SP = SP + 1;
ireturn;
