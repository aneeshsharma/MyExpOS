// set mode flag to read system call - 7
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R0;
alias currentPID R2;
alias process_table R1;
userSP = SP;
currentPID = [SYSTEM_STATUS_TABLE + 1];
process_table = PROCESS_TABLE + currentPID * 16;

[process_table + 13] = userSP;

SP = [process_table + 11] * 512 - 1;

alias fileDescriptor R3;
alias physicalPageNum R4;
alias offset R5;
alias physicalAddr R6;

physicalPageNum = [PTBR + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
physicalAddr = (physicalPageNum * 512) + offset;
fileDescriptor = [physicalAddr];

if (fileDescriptor != -1) then
	physicalPageNum = [PTBR + 2 * ((userSP - 1) / 512)];
	offset = (userSP - 1) % 512;
	physicalAddr = (physicalPageNum * 512) + offset;
	[physicalAddr - 1] = -1;
endif;

alias wordAddress R7;
physicalPageNum = [PTBR + 2 * ((userSP - 3) / 512)];
offset = (userSP - 3) % 512;
physicalAddr = (physicalPageNum * 512) + offset;
wordAddress = [physicalAddr];

if (fileDescriptor == -1) then
	multipush(R0, R1, R2, R3, R4, R5, R6, R7);
	R1 = TERMINAL_READ;
	// R2 already contains current PID
	R3 = wordAddress;

	call MOD_4;

	multipop(R0, R1, R2, R3, R4, R5, R6, R7);
	
	physicalPageNum = [PTBR + 2 * ((userSP - 1) / 512)];
	offset = (userSP - 1) % 512;
	physicalAddr = (physicalPageNum * 512) + offset;
	[physicalAddr - 1] = 0;
endif;

[process_table + 9] = 0;

SP = userSP;
ireturn;
