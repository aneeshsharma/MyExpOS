alias userSP R1;
alias currentPID R2;
alias process_table R3;
userSP = SP;
currentPID = [SYSTEM_STATUS_TABLE + 1];
process_table = PROCESS_TABLE + currentPID * 16;
[process_table + 13] = userSP;

SP = [process_table + 11] * 512 - 1;

alias logicalAddress R4;
alias physicalAddress R5;

alias function R6;

logicalAddress = userSP - 5;
physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);

function = [physicalAddress];

if (function == INT_SEMGET) then
	[process_table + 9] = INT_SEMGET;
	
	alias entry R6;
	alias userPage R7;
	alias table R8;

	userPage = [process_table + 11];
	table = (userPage + 1) * 512 - 16;

	entry = 0;
	while (entry < 8) do
		if ([table + entry * 2] == -1) then
			break;
		endif;
		entry = entry + 1;
	endwhile;

	if (entry == 8) then
		logicalAddress = userSP - 1;
		physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
		[physicalAddress] = -1;
		[process_table + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	[table + entry * 2] = SEMAPHORE;

	alias sem_index R9;

	multipush(R1, R2, R3, R6, R7, R8);
	R1 = ACQUIRE_SEMAPHORE;
	// R2 already has pid
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R6, R7, R8);


	if (R0 == -1) then
		logicalAddress = userSP - 1;
		physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
		[physicalAddress] = -2;
		[process_table + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	sem_index = R0;
	
	[table + entry * 2 + 1] = sem_index;


	logicalAddress = userSP - 1;
	physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
	[physicalAddress] = entry;
	[process_table + 9] = 0;
	SP = userSP;
	ireturn;
endif;

if (function == INT_SEMRELEASE) then
	[process_table + 9] = INT_SEMRELEASE;
	
	alias entry R6;
	alias userPage R7;
	alias table R8;

	userPage = [process_table + 11];
	table = (userPage + 1) * 512 - 16;

	logicalAddress = userSP - 4;
	physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);

	entry = [physicalAddress];
	

	if ((entry >= 8) || (entry < 0) || ([table + entry * 2] != 1)) then
		logicalAddress = userSP - 1;
		physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
		[physicalAddress] = -1;
		[process_table + 9] = 0;
		SP = userSP;
		ireturn;
	endif;

	multipush(R1, R2, R3, R6, R7, R8);
	R1 = RELEASE_SEMAPHORE;
	// pid already in R2
	R3 = [table + entry * 2 + 1];
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R6, R7, R8);


	[table + entry * 2] = -1;

	logicalAddress = userSP - 1;
	physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
	[physicalAddress] = 0;
	[process_table + 9] = 0;
	SP = userSP;
	ireturn;
endif;

logicalAddress = userSP - 1;
physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
[physicalAddress] = -1;
[process_table + 9] = 0;
SP = userSP;
ireturn;
