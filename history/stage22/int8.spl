[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = INT_FORK;

alias parentPID R2;
alias userSP R3;
alias process_table R4;
alias childPID R5;
alias logicalAddress R6;
alias physicalAddress R7;

parentPID = [SYSTEM_STATUS_TABLE + 1];
process_table = PROCESS_TABLE + parentPID * 16;


[process_table + 13] = SP;
userSP = SP;
SP = [process_table + 11] * 512 - 1;

multipush(R2, R3, R4);
R1 = GET_PCB_ENTRY;
call PROCESS_MANAGER;
multipop(R2, R3, R4);

childPID = R0;

if (childPID == -1) then
	logicalAddress = userSP - 1;
	physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
	[physicalAddress] = -1;
	[process_table + 9] = 0;
	SP = userSP;
	ireturn;
endif;


alias page_table R8;

page_table = PAGE_TABLE_BASE + parentPID * 20;

// allocate heap pages if doesn't exist
if ([page_table + 4] == -1) then
	multipush(R2, R3, R4, R5, R8);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R2, R3, R4, R5, R8);

	[page_table + 4] = R0;
	[page_table + 5] = "0110";
endif;

if ([page_table + 6] == -1) then
	multipush(R2, R3, R4, R5, R8);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R2, R3, R4, R5, R8);

	[page_table + 6] = R0;
	[page_table + 7] = "0110";
endif;

alias process_table_child R9;

process_table_child = PROCESS_TABLE + childPID * 16;

PTBR = [process_table_child + 14];
PTLR = [process_table_child + 15];

//allocate stack pages
multipush(R2, R3, R4, R5, R8, R9);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R2, R3, R4, R5, R8, R9);

[PTBR + 16] = R0;
[PTBR + 17] = "0110";

multipush(R2, R3, R4, R5, R8, R9);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R2, R3, R4, R5, R8, R9);

[PTBR + 18] = R0;
[PTBR + 19] = "0110";

// allocate user area page
multipush(R2, R3, R4, R5, R8);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop(R2, R3, R4, R5, R8);

[process_table_child + 11] = R0;

// copy from parent
[process_table_child + 3] = [process_table + 3];
[process_table_child + 6] = [process_table + 6];
[process_table_child + 10] = [process_table + 10];
[process_table_child + 7] = [process_table + 7];
[process_table_child + 13] = [process_table + 13];

// initialize child entries
[process_table_child + 9] = 0;
[process_table_child + 12] = 0;
[process_table_child + 0] = 0;

[process_table_child + 2] = parentPID;
[process_table_child + 4] = CREATED;


// copy per process resource table
alias counter R10;
alias table_parent R13;
alias table_child R14;
alias sem_table R15;
counter = 0;
table_parent = ([process_table + 11] + 1) * 512 - 16;
table_child = ([process_table_child + 11] + 1) * 512 - 16;
while (counter < 8) do
	[table_child + 2 * counter] = [table_parent + 2 * counter];
	[table_child + 2 * counter + 1] = [table_parent + 2 * counter + 1];

	if ([table_parent + 2 * counter] == SEMAPHORE) then
		sem_table = SEMAPHORE_TABLE + 4 * [table_parent + 2 * counter + 1];
		[sem_table + 1] = [sem_table + 1] + 1;
	endif;
	counter = counter + 1;
endwhile;

// copy disk map
counter = 2;
while (counter < 10) do
	[DISK_MAP_TABLE + childPID * 10 + counter] = [DISK_MAP_TABLE + parentPID * 10 + counter];
	counter = counter + 1;
endwhile;


counter = 0;
while (counter < 8) do
	[PTBR + counter * 2] = [page_table + counter * 2];
	[PTBR + counter * 2 + 1] = [page_table + counter * 2 + 1];
	
	// increment count in mem list
	physicalAddress = MEMORY_FREE_LIST + [PTBR + counter * 2];
	[physicalAddress] = [physicalAddress] + 1;
	counter = counter + 1;
endwhile;

alias src_address R11;
alias dest_address R12;

counter = 0;
src_address = [page_table + 16] * 512;
dest_address = [PTBR + 16] * 512;
while (counter < 512) do
	[dest_address + counter] = [src_address + counter];
	counter = counter + 1;
endwhile;

counter = 0;
src_address = [page_table + 18] * 512;
dest_address = [PTBR + 18] * 512;
while (counter < 512) do
	[dest_address + counter] = [src_address + counter];
	counter = counter + 1;
endwhile;


[[process_table_child + 11] * 512] = BP;


logicalAddress = userSP - 1;
// return value for child
physicalAddress = [PTBR + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
[physicalAddress] = 0;

//return value for parent
physicalAddress = [page_table + 2 * (logicalAddress / 512)] * 512 + (logicalAddress % 512);
[physicalAddress] = childPID;


[process_table + 9] = 0;
SP = userSP;
PTBR = page_table;
PTLR = 10;
ireturn;

